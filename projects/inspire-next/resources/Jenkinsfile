def setBuildStatus(String message, String state, String context, String sha) {
    step([
        $class: "GitHubCommitStatusSetter",
        reposSource: [$class: "ManuallyEnteredRepositorySource", url: "https://github.com/inspirehep/inspire-next"],
        contextSource: [$class: "ManuallyEnteredCommitContextSource", context: context],
        errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
        commitShaSource: [$class: "ManuallyEnteredShaSource", sha: sha],
        statusBackrefSource: [$class: "ManuallyEnteredBackrefSource", backref: "${BUILD_URL}flowGraphTable/"],
        statusResultSource: [$class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
    ]);
}

def getCommitSha() {
      sh "git rev-parse HEAD > .git/current-commit"
      return readFile(".git/current-commit").trim()
  }


node ('master') {
  git poll: true, url: 'https://github.com/inspirehep/inspire-next'

  def COMMIT_AUTHOR_EMAIL = sh returnStdout: true, script: "git log --format='%ae' HEAD^!"
  COMMIT_AUTHOR_EMAIL = COMMIT_AUTHOR_EMAIL.trim()

  env.COMMITHASH = getCommitSha()

  withCredentials([file(credentialsId: 'K8S_CA', variable: 'K8S_CA'),
                   file(credentialsId: 'K8S_CERT', variable: 'K8S_CERT'),
                   file(credentialsId: 'K8S_CONFIG', variable: 'K8S_CONFIG'),
                   file(credentialsId: 'K8S_KEY', variable: 'K8S_KEY'),
                   string(credentialsId: 'GITLAB_PASSWORD', variable: 'GITLAB_PASSWORD'),
                   string(credentialsId: 'GITLAB_USERNAME', variable: 'GITLAB_USERNAME')
                   ]) {
    try {
      stage('Init') {
        sh '''
          rm -rf jenkins
          git clone -b acceptance-tests https://$GITLAB_USERNAME:$GITLAB_PASSWORD@gitlab.cern.ch/inspire/jenkins.git
          ./jenkins/projects/inspire-next/resources/init.sh
        '''
      }

      stage('Build') {
        def statusCodeBuild = sh returnStatus: true, script: '''
          ./jenkins/projects/inspire-next/resources/build.sh
        '''

        if (statusCodeBuild != 0) {
            currentBuild.result = 'FAILURE'
            setBuildStatus("Image build failed", "ERROR", "cern/jenkins/builder", env.COMMITHASH)
            mail body: "Build #${BUILD_ID}\nCommit ${env.COMMITHASH}", subject: "[Jenkins] Failed building image", to: COMMIT_AUTHOR_EMAIL
            error "Build of the docker image failed"
            sleep 2
        }
        else {
          setBuildStatus("Successfully built image", "SUCCESS", "cern/jenkins/builder", env.COMMITHASH)
        }
      }

      stage('Tests') {
        def statusCodeAcceptance, statusCodeWorkflows, statusCodeIntegration, statusCodeUnit

         ansiColor('xterm') {
          parallel (
            acceptance: {
              statusCodeAcceptance = sh returnStatus: true, script: '''
                ./jenkins/projects/inspire-next/resources/acceptance_tests.sh
                '''

              if (statusCodeAcceptance != 0) {
                currentBuild.result = 'FAILURE'
                setBuildStatus("Acceptance tests failed", "FAILURE", "cern/jenkins/acceptance", env.COMMITHASH)
                mail body: "Build #${BUILD_ID}\nCommit ${env.COMMITHASH}", subject: "[Jenkins] Failed acceptance tests", to: COMMIT_AUTHOR_EMAIL
              }
              else {
                  setBuildStatus("Acceptance tests passed", "SUCCESS", "cern/jenkins/acceptance", env.COMMITHASH)
              }

              junit "result_acceptance.xml"
            },

            workflows: {
              statusCodeWorkflows = sh returnStatus: true, script: '''
                ./jenkins/projects/inspire-next/resources/workflows_tests.sh
                '''

              if (statusCodeWorkflows != 0) {
                currentBuild.result = 'FAILURE'
                setBuildStatus("Workflows tests failed", "FAILURE", "cern/jenkins/workflows", env.COMMITHASH)
                mail body: "Build #${BUILD_ID}\nCommit ${env.COMMITHASH}", subject: "[Jenkins] Failed workflows tests", to: COMMIT_AUTHOR_EMAIL
              }
              else {
                  setBuildStatus("Workflows tests passed", "SUCCESS", "cern/jenkins/workflows", env.COMMITHASH)
              }

              junit "result_workflows.xml"
            },

            integration: {
              statusCodeIntegration = sh returnStatus: true, script: '''
                ./jenkins/projects/inspire-next/resources/integration_tests.sh
                '''

              if (statusCodeIntegration != 0) {
                currentBuild.result = 'FAILURE'
                setBuildStatus("Integration tests failed", "FAILURE", "cern/jenkins/integration", env.COMMITHASH)
                mail body: "Build #${BUILD_ID}\nCommit ${env.COMMITHASH}", subject: "[Jenkins] Failed integration tests", to: COMMIT_AUTHOR_EMAIL
              }
              else {
                  setBuildStatus("Integration tests passed", "SUCCESS", "cern/jenkins/integration", env.COMMITHASH)
              }

              junit "result_integration.xml"
            },

            unit: {
              statusCodeUnit = sh returnStatus: true, script: '''
                ./jenkins/projects/inspire-next/resources/unit_tests.sh
                '''

              if (statusCodeUnit != 0) {
                currentBuild.result = 'FAILURE'
                setBuildStatus("Unit tests failed", "FAILURE", "cern/jenkins/unit", env.COMMITHASH)
                mail body: "Build #${BUILD_ID}\nCommit ${env.COMMITHASH}", subject: "[Jenkins] Failed unit tests", to: COMMIT_AUTHOR_EMAIL
              }
              else {
                  setBuildStatus("Unit tests passed", "SUCCESS", "cern/jenkins/unit", env.COMMITHASH)
              }

              junit "result_unit.xml"
            }
          )

          if (!statusCodeAcceptance && !statusCodeWorkflows && !statusCodeIntegration && !statusCodeUnit) {
            currentBuild.result = 'SUCCESS'
            mail body: "Build #${BUILD_ID}\nCommit ${env.COMMITHASH}", subject: "[Jenkins] Successful build", to: COMMIT_AUTHOR_EMAIL
          }
          else {
            currentBuild.result = 'FAILURE'
            error "Tests failed"
          }
        }
      }
    } finally {
      stage('Cleanup') {
        sh '''
          ./jenkins/projects/inspire-next/resources/cleanup.sh
        '''
      }
    }
  }

  stage('Confirm') {
    timeout(time: 1, unit: 'DAYS') {
            input(message: 'Deploy to QA?')
    }
  }

  stage('Post-confirmation stage') {
    sh 'echo "Here deploy should happen..."'
  }
}
